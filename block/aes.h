#ifndef BLOCK__AES_H
#define BLOCK__AES_H

#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <sys/types.h>

#include "util.h"
#include "block/util.h"

#define AES_BLOCK_SIZE 16

/*
	AES matrix reference 
	
	0  4  8  12
	1  5  9  13
	2  6  10 14
	3  7  11 15
*/

const byte Sbox[256] = {
	0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
	0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
	0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
	0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
	0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
	0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
	0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
	0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
	0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
	0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
	0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
	0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
	0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
	0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
	0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
	0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
};

const byte Q_Sbox[256] = {
	0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
	0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
	0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
	0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
	0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
	0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
	0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
	0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
	0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
	0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
	0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
	0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
	0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
	0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
	0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
	0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
};

const byte Rcon[256] = {
	0x8D, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36, 0x6C, 0xD8, 0xAB, 0x4D, 0x9A, 
	0x2F, 0x5E, 0xBC, 0x63, 0xC6, 0x97, 0x35, 0x6A, 0xD4, 0xB3, 0x7D, 0xFA, 0xEF, 0xC5, 0x91, 0x39, 
	0x72, 0xE4, 0xD3, 0xBD, 0x61, 0xC2, 0x9F, 0x25, 0x4A, 0x94, 0x33, 0x66, 0xCC, 0x83, 0x1D, 0x3A, 
	0x74, 0xE8, 0xCB, 0x8D, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36, 0x6C, 0xD8, 
	0xAB, 0x4D, 0x9A, 0x2F, 0x5E, 0xBC, 0x63, 0xC6, 0x97, 0x35, 0x6A, 0xD4, 0xB3, 0x7D, 0xFA, 0xEF, 
	0xC5, 0x91, 0x39, 0x72, 0xE4, 0xD3, 0xBD, 0x61, 0xC2, 0x9F, 0x25, 0x4A, 0x94, 0x33, 0x66, 0xCC, 
	0x83, 0x1D, 0x3A, 0x74, 0xE8, 0xCB, 0x8D, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 
	0x36, 0x6C, 0xD8, 0xAB, 0x4D, 0x9A, 0x2F, 0x5E, 0xBC, 0x63, 0xC6, 0x97, 0x35, 0x6A, 0xD4, 0xB3, 
	0x7D, 0xFA, 0xEF, 0xC5, 0x91, 0x39, 0x72, 0xE4, 0xD3, 0xBD, 0x61, 0xC2, 0x9F, 0x25, 0x4A, 0x94, 
	0x33, 0x66, 0xCC, 0x83, 0x1D, 0x3A, 0x74, 0xE8, 0xCB, 0x8D, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 
	0x40, 0x80, 0x1B, 0x36, 0x6C, 0xD8, 0xAB, 0x4D, 0x9A, 0x2F, 0x5E, 0xBC, 0x63, 0xC6, 0x97, 0x35, 
	0x6A, 0xD4, 0xB3, 0x7D, 0xFA, 0xEF, 0xC5, 0x91, 0x39, 0x72, 0xE4, 0xD3, 0xBD, 0x61, 0xC2, 0x9F, 
	0x25, 0x4A, 0x94, 0x33, 0x66, 0xCC, 0x83, 0x1D, 0x3A, 0x74, 0xE8, 0xCB, 0x8D, 0x01, 0x02, 0x04, 
	0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36, 0x6C, 0xD8, 0xAB, 0x4D, 0x9A, 0x2F, 0x5E, 0xBC, 0x63, 
	0xC6, 0x97, 0x35, 0x6A, 0xD4, 0xB3, 0x7D, 0xFA, 0xEF, 0xC5, 0x91, 0x39, 0x72, 0xE4, 0xD3, 0xBD, 
	0x61, 0xC2, 0x9F, 0x25, 0x4A, 0x94, 0x33, 0x66, 0xCC, 0x83, 0x1D, 0x3A, 0x74, 0xE8, 0xCB, 0x8D
};

inline void schedule_core(byte* word, unsigned int rc) {
	byte tmp = word[0];
	word[0] = word[1];
	word[1] = word[2];
	word[2] = word[3];
	word[3] = tmp;
	
	for (unsigned int i = 0; i < 4; i++) {
		word[i] = Sbox[word[i]];
	}
	
	word[0] ^= Rcon[rc];
}

byte* key_schedule(const byte* key, const size_t key_len) {
	
	size_t n = key_len;
	
	byte t[4];
	unsigned int c = n;
	unsigned int b;
	unsigned int i = 1;
	
	if (key_len == 16) {
		b = 176;
	} else if (key_len == 24) {
		b = 208;
	} else if (key_len == 32) {
		b = 240;
	}
	
	byte* round_keys = (byte*)malloc(b * sizeof(byte));
	memcpy(round_keys, key, key_len);
	
	while (c < b) {
		for (unsigned int a = 0; a < 4; a++) {
			t[a] = round_keys[a + c - 4];
		}
		
		if (c % n == 0) {
			schedule_core(t, i);
			i++;
		}
		
		if (key_len == 32 && c % n == 16) {
			for (unsigned int a = 0; a < 4; a++) {
				t[a] = Sbox[t[a]];
			}
		}
		
		for (unsigned int a = 0; a < 4; a++) {
			round_keys[c] = (round_keys[c - n] ^ t[a]) % 256;
			c++;
		}
		
	}
	
	return round_keys;
}
	
void subbytes(byte* state) {
	for (unsigned int i = 0; i < AES_BLOCK_SIZE; i++) {
		state[i] = Sbox[state[i]];
	}
}

void Q_subbytes(byte* state) {
	for (unsigned int i = 0; i < AES_BLOCK_SIZE; i++) {
		state[i] = Q_Sbox[state[i]];
	}
}

void shiftrows(byte* state) {
	byte tmp1 = state[1];
	
	state[1] = state[5];
	state[5] = state[9];
	state[9] = state[13];
	state[13] = tmp1;
	
	swap(&state[2], &state[10]);
	swap(&state[6], &state[14]);
	
	byte tmp15 = state[15];
	
	state[15] = state[11];
	state[11] = state[7];
	state[7] = state[3];
	state[3] = tmp15;
}

void Q_shiftrows(byte* state) {
	
	byte tmp13 = state[13];
	
	state[13] = state[9];
	state[9] = state[5];
	state[5] = state[1];
	state[1] = tmp13;
	
	swap(&state[2], &state[10]);
	swap(&state[6], &state[14]);
	
	byte tmp3 = state[3];
	
	state[3] = state[7];
	state[7] = state[11];
	state[11] = state[15];
	state[15] = tmp3;
}

byte g_mult(byte a, byte b) {
	byte p = 0;
	unsigned int a_i = (unsigned int)a;
	
	for (unsigned int c = 0; c < 8; c++) {
		if ((b & 1) == 1) {
			p ^= a_i;
		}
		
		a_i <<= 1;
		if (a_i > 0xFF) {
			a_i ^= 0x1B;
			a_i -= 0x100;
		}
		
		b >>= 1;
	}
	
	return p;
}

void mixcolumns(byte* state) {
	byte a[4];
	
	for (unsigned int r = 0; r < 4; r++) {
		
		unsigned int row = r * 4;
		
		a[0] = state[row];
		a[1] = state[row+1];
		a[2] = state[row+2];
		a[3] = state[row+3];
		
		state[row]   = g_mult(a[0],2) ^ a[3] ^ a[2] ^ g_mult(a[1],3);
		state[row+1] = g_mult(a[1],2) ^ a[0] ^ a[3] ^ g_mult(a[2],3);
		state[row+2] = g_mult(a[2],2) ^ a[1] ^ a[0] ^ g_mult(a[3],3);
		state[row+3] = g_mult(a[3],2) ^ a[2] ^ a[1] ^ g_mult(a[0],3);
	}
}

void Q_mixcolumns(byte* state) {
	byte a[4];
	
	for (unsigned int r = 0; r < 4; r++) {
		
		unsigned int row = r * 4;
		
		a[0] = state[row];
		a[1] = state[row+1];
		a[2] = state[row+2];
		a[3] = state[row+3];
		
		state[row]   = g_mult(a[0],14) ^ g_mult(a[3],9) ^ g_mult(a[2],13) ^ g_mult(a[1],11);
		state[row+1] = g_mult(a[1],14) ^ g_mult(a[0],9) ^ g_mult(a[3],13) ^ g_mult(a[2],11);
		state[row+2] = g_mult(a[2],14) ^ g_mult(a[1],9) ^ g_mult(a[0],13) ^ g_mult(a[3],11);
		state[row+3] = g_mult(a[3],14) ^ g_mult(a[2],9) ^ g_mult(a[1],13) ^ g_mult(a[0],11);
	}
}

void AES_encrypt(byte* input, const size_t input_len, const byte* key, const size_t key_len) {
	assert(input_len == AES_BLOCK_SIZE);
	assert(key_len == 16 || key_len == 24 || key_len == 32);
	
	// Determine quantity of rounds based on key size
	unsigned int rounds;
	
	if (key_len == 16) {
		rounds = 10;
	} else if (key_len == 24) {
		rounds = 12;
	} else if (key_len == 32) {
		rounds = 14;
	}
	
	// Schedule round keys
	byte* round_keys = key_schedule(key, key_len);
	
	// First round, only addroundkey
	xor_buffer(input, round_keys, AES_BLOCK_SIZE);
	
	// Main rounds except for last round
	for (unsigned int round = 1; round < rounds; round++) {
		subbytes(input);
		shiftrows(input);
		mixcolumns(input);
		xor_buffer(input, &round_keys[round*AES_BLOCK_SIZE], AES_BLOCK_SIZE);
	}
	
	// Final round, no mixcolumns
	subbytes(input);
	shiftrows(input);
	xor_buffer(input, &round_keys[rounds*AES_BLOCK_SIZE], AES_BLOCK_SIZE);
	
	free(round_keys);
}

void AES_decrypt(byte* input, const size_t input_len, const byte* key, const size_t key_len) {
	assert(input_len == AES_BLOCK_SIZE);
	assert(key_len == 16 || key_len == 24 || key_len == 32);
	
	// Determine quantity of rounds based on key size
	unsigned int rounds;
	
	if (key_len == 16) {
		rounds = 10;
	} else if (key_len == 24) {
		rounds = 12;
	} else if (key_len == 32) {
		rounds = 14;
	}
	
	// Schedule round keys
	byte* round_keys = key_schedule(key, key_len);
	
	// Do everything in reverse, starting with last round
	xor_buffer(input, &round_keys[rounds*AES_BLOCK_SIZE], AES_BLOCK_SIZE);
	Q_shiftrows(input);
	Q_subbytes(input);
	
	// Main rounds except for first round
	for (unsigned int round = rounds - 1; round > 0; round--) {
		xor_buffer(input, &round_keys[round*AES_BLOCK_SIZE], AES_BLOCK_SIZE);
		Q_mixcolumns(input);
		Q_shiftrows(input);
		Q_subbytes(input);
	}
	
	// First round, only addroundkey
	xor_buffer(input, &round_keys[0], AES_BLOCK_SIZE);
	
	free(round_keys);
}

#endif